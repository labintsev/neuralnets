"""
DO NOT EDIT THIS FILE!!!
"""
import unittest
from seminar5 import *


class TestKernelSize(unittest.TestCase):
    """1 point"""

    def test_ks_1(self):
        x = tf.ones((1, 10, 10, 3))
        layer = build_conv_layer()
        z = layer(x)
        self.assertIsInstance(layer, tf.keras.layers.Conv2D)
        self.assertEqual(z.shape, (1, 2, 2, 2))

    def test_ks_2(self):
        x = tf.ones((1, 20, 20, 3))
        layer = build_conv_layer()
        z = layer(x)
        self.assertIsInstance(layer, tf.keras.layers.Conv2D)
        self.assertEqual(z.shape, (1, 4, 4, 2))


class TestPaddingSame(unittest.TestCase):
    """1 point"""
    def test_ps_1(self):
        x = tf.ones((1, 10, 10, 3))
        layer = build_padded_conv_layer(kernel_size=3)
        z = layer(x)
        self.assertIsInstance(layer, tf.keras.layers.Conv2D)
        self.assertEqual(z.shape, (1, 10, 10, 2))

    def test_ps_2(self):
        x = tf.ones((1, 20, 20, 3))
        layer = build_padded_conv_layer(kernel_size=2)
        z = layer(x)
        self.assertIsInstance(layer, tf.keras.layers.Conv2D)
        self.assertEqual(z.shape, (1, 20, 20, 2))


class TestDepthWise(unittest.TestCase):
    """1 point"""
    def test_dw_1(self):
        x = tf.ones((1, 10, 10, 3))
        layer = build_depth_wise_conv_layer()
        z = layer(x)
        self.assertIsInstance(layer, tf.keras.layers.DepthwiseConv2D)
        self.assertEqual(z.shape, (1, 8, 8, 6))

    def test_dw_2(self):
        x = tf.ones((1, 20, 20, 3))
        layer = build_depth_wise_conv_layer()
        z = layer(x)
        self.assertIsInstance(layer, tf.keras.layers.DepthwiseConv2D)
        self.assertEqual(z.shape, (1, 18, 18, 6))


class TestPooling(unittest.TestCase):
    """1 point"""
    def test_pool_1(self):
        x = tf.range(27)
        x = tf.reshape(x, (1, 3, 3, 3))
        layer = build_pooling_layer()
        z = layer(x)
        self.assertIsInstance(layer, tf.keras.layers.MaxPooling2D)
        self.assertEqual(z.shape, (1, 1, 1, 3))

    def test_pool_2(self):
        x = tf.range(32)
        x = tf.reshape(x, (1, 4, 4, 2))
        layer = build_pooling_layer()
        z = layer(x)
        self.assertIsInstance(layer, tf.keras.layers.MaxPooling2D)
        self.assertEqual(z.shape, (1, 2, 2, 2))


class TestUpSample(unittest.TestCase):
    """1 point"""
    def test_us_1(self):
        x = tf.ones((1, 32, 32, 3))
        layer = build_up_conv_layer()
        z = layer(x)
        self.assertIsInstance(layer, tf.keras.layers.Conv2DTranspose)
        self.assertEqual(z.shape, (1, 65, 65, 4))

    def test_us_2(self):
        x = tf.ones((1, 64, 64, 3))
        layer = build_up_conv_layer()
        z = layer(x)
        self.assertIsInstance(layer, tf.keras.layers.Conv2DTranspose)
        self.assertEqual(z.shape, (1, 129, 129, 4))


if __name__ == '__main__':
    unittest.main()
